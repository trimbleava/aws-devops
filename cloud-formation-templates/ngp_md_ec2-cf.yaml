AWSTemplateFormatVersion: 2010-09-09
Description: Build a Multitenant Django Nginx Gunicorn Postgres (NGPMDonEC2) web application
             stack on AWS EC2 instance template with CloudFormation, ngp_md_ec2-cf.yaml
             OR  aws cloudformation rollback-stack create-stack --stack-name ngp-md-ec2-stack \
             aws cloudformation create-stack --stack-name ngp-md-ec2-stack --disable-rollback \
              --template-body file://ngp_md_ec2-cf.yaml --parameters \
              ParameterKey=AvailabilityZone,ParameterValue=us-east-1c \
              ParameterKey=EnvironmentType,ParameterValue=dev \
              ParameterKey=InstanceName,ParameterValue="django webapp" \
              ParameterKey=DBPassword,ParameterValue=postgress \
              ParameterKey=DBInstanceName,ParameterValue=ngp-md-db \
              --capabilities CAPABILITY_IAM 
              https://repost.aws/knowledge-center/install-cloudformation-scripts
              https://jennapederson.com/blog/2021/11/26/using-cloudformation-to-automate-build-test-deploy-with-codepipeline-part-3/
              sudo service codedeploy-agent status
Parameters:
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
  EnvironmentType:
    Description: "Specify the Environment type of the stack."
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."  
    Default: /aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id
    # Default: /aws/service/amazon/ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20231207

  # KeyPairName:
  #   Type: String
  #   Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.

  InstanceName:
    Type: String
    Description: The name of Amazon EC2 instance
  DBInstanceIdentifier:
    Type: String
    Default: "ngp-md-db-id"
  DBInstanceName:
    Type: String
    Description: The name of database
  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: "postgres"
  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.

Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.nano
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.small

Resources:

  NGPMDonEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [ngp-md-sg, !Ref EnvironmentType]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  NGPMDonEC2KeyPair:
    Type: 'AWS::EC2::KeyPair'   # The private key is saved to AWS Systems Manager Parameter Store. 
                                # The parameter name has the following format: /ec2/keypair/key_pair_id
    Properties:
      KeyName: ngp-md-keypair

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:Describe*
              - cloudformation:Describe*
              - cloudformation:GetTemplate
              - s3:Get*
            Resource: '*'
      Roles:
        - !Ref 'InstanceRole'

  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
                - codedeploy.us-west-2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref 'CodeDeployTrustRole'

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                -
                  Effect: "Allow"
                  Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                      - ecr:GetAuthorizationToken
                      - ssm:GetParameters
                  Resource: "*"
        - PolicyName: "S3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                -
                  Effect: "Allow"
                  Action:
                      - s3:GetObject
                      - s3:PutObject
                      - s3:GetObjectVersion
                  Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                Effect: Allow
                Action:
                  - s3:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource:
                  - !Ref CodeStarConnection
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
              - Resource: "*"
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:CreateDeploymentGroup
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                      
  NGPMDonEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone   # ami-0c7217cdde317cfec(jammy) ami-079db87dc4c10ac91(linux) ami-0d5eff06f840b45e9(only in us-east-1)
      ImageId: !Ref AmiID
      Tags:
        - Key: Name
          Value: !Ref InstanceName
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      KeyName: !Ref NGPMDonEC2KeyPair
      SecurityGroupIds:
        - !Ref NGPMDonEC2SecurityGroup

      IamInstanceProfile: !Ref 'InstanceRoleInstanceProfile'

      # Then, we'll add the UserData key, which allows us to pass user data to the EC2 instance to perform automated
      # configuration tasks and run scripts after the instance starts up. Any scripts in user data are run when you launch the instance. 
      # User data is limited to 16 KB. You must provide base64-encoded text. For more information, see Fn::Base64.
      # The UserData property runs two shell commands: install the CloudFormation helper scripts and then run the cfn-init helper script. 
      # When you run cfn-init, it reads metadata from the AWS::CloudFormation::Init resource, which describes 
      # the actions to be carried out by cfn-init. For example, you can use cfn-init and AWS::CloudFormation::Init to install packages, 
      # write files to disk, or start a service.
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'sudo apt-get update -y

              '
            - 'sudo apt-get -y install ruby-full

              '
            - 'sudo apt-get -y install wget

              '
            - 'cd /home/ubuntu

              '
            - 'wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install

              '
            - 'chmod +x ./install
            
              '
            - 'sudo ./install auto > /tmp/logfile

              '
            - 'sudo apt-get -y install python3-pip

              '
            - 'mkdir -p /opt/aws/

              '
            - 'sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

              '
            - 'sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup

              '
            - "/usr/local/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource NGPMDonEC2Instance "
            - "         --configsets full_install "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "/usr/local/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource NGPMDonEC2Instance "
            - "         --region "
            - Ref: AWS::Region
            - "\n"

    Metadata:
      # Install helper scripts for Ubuntu 22.04 LTS AMIs during the boot process. 
      # Use the UserData property to download and install the AMIs. 
      # Then, start the cfn-hup service at launch. 
      # These scripts create a service in systemd to allow the cfn-hup helper daemon to automatically start at boot.
      # Make systemd a dependency of an existing boot target. Use multi-user.target to create the dependency.
      # When you run cfn-init, it reads metadata from the AWS::CloudFormation::Init resource, which describes 
      # the actions to be carried out by cfn-init.
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content:
                Fn::Join:
                - ''
                - - "[Unit]\n"
                  - "Description=cfn-hup daemon\n\n"
                  - "[Service]\n"
                  - 'Type=simple

                    '
                  - 'ExecStart=/usr/local/bin/cfn-hup

                    '
                  - "Restart=always\n\n"
                  - "[Install]\n"
                  - WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service

  NGPMDonEC2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NGPMDonEC2Instance
      Tags:
        - Key: Name
          Value: !Join ["-", [ngp-md-eip, !Ref EnvironmentType]]  

  NGPMDonEC2Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceName
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join ["-", [ngp-md-rds, !Ref EnvironmentType]]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  NGPMDonEC2DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-db-security-group, !Ref EnvironmentType]]
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupName:
            Ref: NGPMDonEC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [webapp-db-security-group, !Ref EnvironmentType]]

Outputs:
  WebsiteURL:
    Value: !Sub http://${NGPMDonEC2EIP}
    Description: WebApp URL

  WebServerPublicDNS:
    Description: "Public DNS of EC2 instance"
    Value: !GetAtt NGPMDonEC2Instance.PublicDnsName

  NGPMDonEC2DatabaseEndpoint:
    Description: "Connection endpoint for the database"
    Value: !GetAtt NGPMDonEC2Database.Endpoint.Address

  CodeDeployTrustRoleARN:
    Value: !GetAtt 'CodeDeployTrustRole.Arn'